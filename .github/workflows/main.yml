name: CI Build and Docker Push

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_REPOSITORY: daffablqs/workflow-ci

    steps:
      # Set up job & checkout
      - name: Checkout repo
        uses: actions/checkout@v3

      # Setup Python via Miniconda & environment setup with mamba
      - name: Setup Miniconda and environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: mlflow-env
          environment-file: MLProject/conda.yaml
          python-version: 3.12.7
          use-mamba: true
          cache: true

      # Verify environment is activated
      - name: Verify Conda Environment Activation
        shell: bash -l {0}
        run: |
          conda info --envs
          echo "Active environment: $CONDA_DEFAULT_ENV"
          which python
          python --version

      # Force install numpy explicitly into the environment (ensures availability)
      - name: Install Missing Dependencies (numpy)
        shell: bash -l {0}
        run: |
          conda install -n mlflow-env numpy --yes
          conda list -n mlflow-env

      # Optional: Upgrade pip and reinstall core python packages forcibly
      - name: Install / Upgrade pip and core packages
        shell: bash -l {0}
        run: |
          pip install --upgrade pip
          pip install --force-reinstall numpy matplotlib seaborn

      # Debug versions of important packages to confirm installation
      - name: Debug package versions
        shell: bash -l {0}
        run: |
          python -c "import numpy; print('numpy:', numpy.__version__)"
          python -c "import matplotlib; print('matplotlib:', matplotlib.__version__)"
          python -c "import seaborn; print('seaborn:', seaborn.__version__)"
          python -c "import mlflow; print('mlflow:', mlflow.__version__)"
          python -c "import dagshub; print('dagshub:', dagshub.__version__)"

      # Run MLflow project training with your specified script
      - name: Run MLflow Project with modelling.py
        shell: bash -l {0}
        run: |
          mlflow run MLProject -e train -P script_name=modelling.py

      # Get latest MLflow run_id for reference
      - name: Get latest MLflow run_id
        id: mlflow_run_id
        run: |
          RUN_ID=$(mlflow runs list --experiment-id 0 --order-by descending --max-results 1 --output json | jq -r '.[0].run_id')
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      # Optional install python dependencies for extra scripts or tools if needed
      - name: Install additional Python dependencies if needed
        shell: bash -l {0}
        run: |
          pip install dagshub mlflow  # sesuaikan kebutuhan anda

      # Upload artifacts to GitHub
      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ml-artifacts
          path: |
            MLProject/model
            MLProject/estimator.html
            MLProject/metric_info.json
            MLProject/training_confusion_matrix.png

      # Build Docker image with MLflow
      - name: Build Docker Image with MLflow
        shell: bash -l {0}
        run: |
          mlflow build-docker -p MLProject -t $DOCKER_REPOSITORY:latest

      # Login to Docker Hub
      - name: Login to DockerHub
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      # Tag Docker Image
      - name: Tag Docker Image
        run: |
          docker tag $DOCKER_REPOSITORY:latest $DOCKER_REPOSITORY:$GITHUB_SHA

      # Push Docker Images
      - name: Push Docker Image
        run: |
          docker push $DOCKER_REPOSITORY:latest
          docker push $DOCKER_REPOSITORY:$GITHUB_SHA
