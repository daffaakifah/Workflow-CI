name: CI Build and Docker Push

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_REPOSITORY: daffablqs/workflow-ci  

    steps:
      # Set up job & checkout
      - name: Checkout repo
        uses: actions/checkout@v3

      # Setup Python via Miniconda & env setup
      - name: Setup Miniconda and environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: mlflow-env
          environment-file: MLProject/conda.yaml
          python-version: 3.12.7
          use-mamba: true
          cache: true

      # Check environment details
      - name: Check environment info
        run: |
          python --version
          conda list
          pip list

      # Run MLflow project training
      - name: Run MLflow Project with modelling.py
        shell: bash -l {0}
        run: |
          mlflow run MLProject -e train -P script_name=modelling.py

      # Get latest MLflow run_id for possible later use
      - name: Get latest MLflow run_id
        id: mlflow_run_id
        run: |
          RUN_ID=$(mlflow runs list --experiment-id 0 --order-by descending --max-results 1 --output json | jq -r '.[0].run_id')
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      # Upload artifacts 
      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ml-artifacts
          path: |
            MLProject/model
            MLProject/estimator.html
            MLProject/metric_info.json
            MLProject/training_confusion_matrix.png

      # Build Docker image with MLflow
      - name: Build Docker Image with MLflow
        shell: bash -l {0}
        run: |
          mlflow build-docker -p MLProject -t $DOCKER_REPOSITORY:latest

      # Login Docker Hub
      - name: Login to DockerHub
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      # Tag Docker Image (optional explicit tagging)
      - name: Tag Docker Image
        run: |
          docker tag $DOCKER_REPOSITORY:latest $DOCKER_REPOSITORY:$GITHUB_SHA

      # Push Docker Image
      - name: Push Docker Image
        run: |
          docker push $DOCKER_REPOSITORY:latest
          docker push $DOCKER_REPOSITORY:$GITHUB_SHA

      # Post steps handled automatically by GitHub Actions (Post log etc)
